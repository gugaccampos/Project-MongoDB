use("DadosCopa")
 
// Find para encontrar o grupo A
db.Grupo.find( { nome: "A" } );

//quantos grupos tem?
db.Grupo.find().count();

//retorna todas as seleções que tem mais de 0 títulos
db.Selecoes.aggregate([{
    $match: {
      titulos: {$gt: 0}
    }
}]).sort({
  titulos: -1
}).pretty();

// Adicionando um título para a seleção da Russia
db.Selecoes.update(
{ nome: 'Russia'},
{$set: { titulos : 1}});

db.Selecoes.find({nome: 'Russia'})

// Desfazendo alteração anterior
db.Selecoes.update(
{ nome: 'Russia'},
{$set: { titulos : 0}});

db.Selecoes.find({nome: 'Russia'})

//Group que retorna quantidade de gols dos playoffs
db.Confrontos.aggregate( [
  {
    $group: {
        _id: "$descricao",
       total_gols: { $sum: { $add : [ 
            '$gols_selecao1', '$gols_selecao2' 
        ]}}
    }
  }
] )

//Acha a seleção que tem 4 títulos
db.Selecoes.findOne({titulos: 4});

//Find com $all que retorna a seleção que ganhou as copas de 1958 e 1962
db.Selecoes.find( { ano_titulos: { $all: [1958, 1962] } } )

//Retorna a média de títulos por seleções
db.Selecoes.aggregate( [
  {
    $group: {
        _id: null,
       media: { $avg: "$titulos"},
       total_selecoes: {$count: {}}
    }
  },
] )

//Retorna as seleções e o nome dos seus respectivos grupos
db.Selecoes.aggregate( [ { $project : 
{ nome : true, _id: false, grupo: "$grupo.nome"} } ] )

//retorna o máximo de gols ocorridos em uma partida
db.Confrontos.aggregate( [
  {
    $group: {
        _id: false,
       maior_gols: { $max: { $add : ['$gols_selecao1', '$gols_selecao2' ]}}
    },
  }

] )

// Retornando as 3 seleções com maior pontuação na fase de grupos
db.Selecoes.find().sort({pt_fase_grupo: -1}).limit(3)

//Deletando um campo e usando a $exists para
//detectar quais itens em Selecoes está sem o atributo 'titulos'
db.Selecoes.update(
{ nome: 'Japão'},
{$unset: { titulos : 0}});

db.Selecoes.find( { titulos: { $exists: false } } )

//estadios que tem Arena no nome
db.Estadios.createIndex({ nome: 'text' })
db.Estadios.find({ $text: {$search: 'Arena'}});

//retorna se um jogo teve muitos gols ou não
db.Confrontos.aggregate(
   [
      {
         $project:
           {
             discount:
               {
                 $cond: { if: { $gte: [ { $sum: { $add : [ '$gols_selecao1', '$gols_selecao2' ]}}, 3 ] }, 
                 then: "jogo com muitos gols", 
                 else: "jogo com poucos gols" }
               }
           }
      }
   ]
)

db.Estatisticas.find();

//retorna mais informaçoes sobre o campeão 
db.Estatisticas.aggregate( [
   {
     $lookup:
       {
         from: "Selecoes",
         localField: "campeão",
         foreignField: "nome",
         as: "sobre o campeão"
       }
  }
] )

// adiciona Cristiano Ronaldo ao array de atacantes da selecao de ouro, simplismente pq ele merece
db.Estatisticas.updateOne(
   { campeão : 'França'},
   {$addToSet: {"selecao.ataque": "Cristiano Ronaldo"}}
);

db.Estatisticas.find();

//Usando size, retorna as selecoes com 5 itens em ano_titulos
db.Selecoes.find( { ano_titulos: { $size: 5 } } );

//retorna os titulos ganhos depois dos anos 2000
db.Selecoes.aggregate( [
   {
      $project: {
         ano_titulos: {
            $filter: {
               input: "$ano_titulos",
               as: "titulo",
               cond: { $and:[
                  { $gte: [ "$$titulo", 2000 ]},
                  ]
               }
            }
         }
      }
   }
] )

//Rename collections
db.Grupo.renameCollection("Grupos");

// Essas funções não conseguem ser aplicadas na nossa versão do mongoDB, mas está aqui a estruturação delas
/*
db.Estadios.find({$where: function() {
    return (this.nome == 'Arena Kazan')
}
}).pretty();

db.Grupos.save({
    _id: db.Grupos.findOne({nome: "D"})._id,
    nome: "I",
    selecoes: {
    "Argentina": '2',
    "Islândia": '4',
    "Croácia": '1',
    "Nigéria": '3'
  }
});

db.Selecoes.mapReduce(
   function() {emit(this.nome,1);},
   function(titulos) {return Array.sum(titulos);},
   {
      query: {titulos: 1},
      out: "mapReduce"
   }
)
db.mapReduce.find();*/
